Assembly Instructions (extended instruction set)

Arithmetic/Logical Instructions

ADDri @A @B //@A is memory address, @B is data literal, result stored in @A
ADDrr @A @B //@A is memory address, @B is memory address, result stored in @A
SUBri @A @B //@A is memory address, @B is data literal, result stored in @A
SUBrr @A @B //@A is memory address, @B is memory address, result stored in @A
INCr @A //@A is the address of the variable to be incremented
DECr @A //@A is the address of the variable to be decremented
BSLr @A //@A is the address of the variable to be bit shifted left
BSRr @A //@A is the address of the variable to be bit shifted right
NEGr @A //@A is the address of the variable to be negated arithmetically
NANDri @A @B //@A is memory address, @B is data literal, result stored in @A
NANDrr @A @B //@A is memory address, @B is memory address, result stored in @A
ANDri @A @B //@A is memory address, @B is data literal, result stored in @A
ANDrr @A @B //@A is memory address, @B is memory address, result stored in @A
ORri @A @B //@A is memory address, @B is data literal, result stored in @A
ORrr @A @B //@A is memory address, @B is memory address, result stored in @A
XORri @A @B //@A is memory address, @B is data literal, result stored in @A
XORrr @A @B //@A is memory address, @B is memory address, result stored in @A
NOTr @A //@A is the address of the variable to be negated logically

Memory Instructions

PUSHi @A //@A is data literal
PUSHr @A //@A is memory address
POPr @A //@A is a memory address
LOADri @A @B //@A is memory address, @B is data literal
MOVrm @A @B //@A is memory address, @B is memory address
MOVrr @A @B //@A is memory address, @B is memory address
MOVmr @A @B //@A is memory address, @B is memory address

I/O Instructions

SENDi @A //@A is data literal
SENDr @A //@A is memory address
READr @A //@A is memory address

Program Control Instructions

BOFri @A @B @C //@A is memory address, @B is data literal, and @C is memory location literal
BOFrr @A @B @C //@A is memory address, @B is memory address, and @C is memory location literal
BEQri @A @B @C //@A is memory address, @B is data literal, and @C is memory location literal
BEQrr @A @B @C //@A is memory address, @B is memory address, and @C is memory location literal
BLTri @A @B @C //@A is memory address, @B is data literal, and @C is memory location literal
BLTrr @A @B @C //@A is memory address, @B is memory address, and @C is memory location literal
GOTO @A //@A is memory location literal

**NOTE**

All memory addresses MUST be a maximum of 12 bits long! That means only the first 8192 addresses can be accessed directly and manipulated.
All other memory must be correspondingly first moved to the temporary register space and then manipulated.
Program location literals, however, can be a maximum of 16 bits long. This includes [0]-[2^16-1]

********

Miscellaneous Instructions

HALT
NOP

The assembly also supports two types of labels:

The first is a program label. The syntax looks like this:

label _IDENTIFIER_ = here

_IDENTIFIER_ can now be used in any program control statements to reference to this location in the linear progression of assembly code.

The second type of label is a variable label. The syntax looks like this:

label _IDENTIFIER_ = @A

@A is the address in data memory of the variable to be stored. Although the syntax is similar, the two labels serve very different purposes.
Labels do NOT need to be defined before they are used in assembly. The assembler makes an initial pass over the source to construct a symbol table.
The assembler does NOT manage memory allocation, so either the programmer or the compiler is responsible for correctly manipulating memory.

The assembler also supports the definition of macroinstructions outside of the default language package. These "functions" are inserted INLINE, and not handled with subroutines/procedures. Macros must be defined in the beginning of the file, and must follow the formula:

MACRO _IDENTIFIER_ [@0 [@1 [@2...]]]
//CODE
END

Again, the programmer is responsible for dealing with any memory conflicts that result. Inbuilt assembly macroinstructions are guaranteed to be safe.

Comments in assembly are prefaced with //
Each statement should be separated by a newline character.
The very first noncomment line in the file must contain the actual line in program memory onto which the program will be loaded, in the format:

@1A9F

Where the location is specified in hexadecimal.
All memory locations should be in hexadecimal.
Literal values can be in base 2, 10, or 16.