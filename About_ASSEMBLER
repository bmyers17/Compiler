Assembly Instructions (extended instruction set)

Arithmetic/Logical Instructions

ADD @A @B @C //@A is data literal or memory address, @B is data literal or memory address, and @C is memory location literal or pointer address
SUB @A @B @C //@A is data literal or memory address, @B is data literal or memory address, and @C is memory location literal or pointer address
INC @A //@A is the address of the variable to be incremented
DEC @A //@A is the address of the variable to be decremented
MULT @A @B @C //@A is data literal or memory address, @B is data literal or memory address, and @C is memory location literal or pointer address
DIV @A @B @C //@A is data literal or memory address, @B is data literal or memory address, and @C is memory location literal or pointer address
BSL @A //@A is the address of the variable to be bit shifted left
BSR @A //@A is the address of the variable to be bit shifted right
NEG @A //@A is the address of the variable to be negated arithmetically
NAND @A @B @C //@A is data literal or memory address, @B is data literal or memory address, and @C is memory location literal or pointer address
NOR @A @B @C //@A is data literal or memory address, @B is data literal or memory address, and @C is memory location literal or pointer address
AND @A @B @C //@A is data literal or memory address, @B is data literal or memory address, and @C is memory location literal or pointer address
OR @A @B @C //@A is data literal or memory address, @B is data literal or memory address, and @C is memory location literal or pointer address
XOR @A @B @C //@A is data literal or memory address, @B is data literal or memory address, and @C is memory location literal or pointer address
NOT @A //@A is the address of the variable to be negated logically

Memory Instructions

PUSH @A //@A is data literal or memory address
POP @A //@A is a memory address
LOAD @A @B //@A is data literal, @B is memory address
COPY @A @B //@A is memory address, @B is memory address

I/O Instructions

SEND @A //@A is data literal or memory address
READ @A //@A is memory address

Program Control Instructions

BOF @A @B @C //@A is data literal or memory address, @B is data literal or memory address, and @C is memory location literal
BEQ @A @B @C //@A is data literal or memory address, @B is data literal or memory address, and @C is memory location literal
BGT @A @B @C //@A is data literal or memory address, @B is data literal or memory address, and @C is memory location literal
BLT @A @B @C //@A is data literal or memory address, @B is data literal or memory address, and @C is memory location literal
BGTE @A @B @C //@A is data literal or memory address, @B is data literal or memory address, and @C is memory location literal
BLTE @A @B @C //@A is data literal or memory address, @B is data literal or memory address, and @C is memory location literal
BNEQ @A @B @C //@A is data literal or memory address, @B is data literal or memory address, and @C is memory location literal
JMP/GOTO @A //@A is memory location literal

Miscellaneous Instructions

HALT
NOP

The assembly also supports two types of labels:

The first is a program label. The syntax looks like this:

label _IDENTIFIER_ = here

_IDENTIFIER_ can now be used in any program control statements to reference to this location in the linear progression of assembly code.

The second type of label is a variable label. The syntax looks like this:

label _IDENTIFIER_ = @A
or
variable _IDENTIFIER_ = @A

@A is the address in data memory of the variable to be stored. Although the syntax is similar, the two labels serve very different purposes.
Labels do NOT need to be defined before they are used in assembly. The assembler makes an initial pass over the source to construct a symbol table.
The assembler does NOT manage memory allocation, so either the programmer or the compiler is responsible for correctly manipulating memory.

The assembler also supports the definition of macroinstructions outside of the default language package. These "functions" are inserted INLINE, and not handled with subroutines/procedures. Macros can be defined anywhere in the file, and must follow the formula:

MACRO _IDENTIFIER_
//CODE
END

Again, the programmer is responsible for dealing with any memory conflicts that result.

Comments in assembly are prefaced with //
Each statement should be separated by a newline character.
The very first line in the file must contain the actual line in program memory onto which the program will be loaded, in the format:

@1A9F

Where the location is specified in hexidecimal.
